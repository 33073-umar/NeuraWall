apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'application'

group = 'cic.unb.ca'
version = '4.0'
description = """CICFlowMeterV4"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://clojars.org/repo" }
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    implementation group: 'org.jnetpcap', name: 'jnetpcap', version: '1.4.1'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.5'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'nz.ac.waikato.cms.weka', name: 'weka-stable', version: '3.6.14'
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.0'
    implementation group: 'com.google.guava', name: 'guava', version: '23.6-jre'
    implementation group: 'org.apache.tika', name: 'tika-core', version: '1.17'
}

sourceSets {
    main {
        java {
            srcDir 'src'
            exclude '**/CICFlowMeter.java'
        }
    }
}

task zipSrc(type: Zip) {
    archiveBaseName.set("${applicationName}-Source")
    destinationDirectory.set(file('build/'))
    from('.') {
        include '**/'
        exclude '.gradle/', 'build/', 'bin/', 'logs/', '*.iml', '*.ipr', '*.iws', '.idea/', 'out/', 'data/'
        into "${applicationName}V${version}-Src"
    }
}

import org.apache.tools.ant.DirectoryScanner
task zipPro(type: Zip) {
    doFirst {
        DirectoryScanner.defaultExcludes.each { DirectoryScanner.removeDefaultExclude it }
    }
    doLast {
        DirectoryScanner.resetDefaultExcludes()
    }

    archiveBaseName.set("${applicationName}-Full")
    destinationDirectory.set(file('build/'))
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from('.') {
        include '**/'
        exclude '.gradle/', 'build/', 'bin/', 'logs/', '*.iml', '*.ipr', '*.iws', '.idea/', 'out/', 'data/', ".git/"
        into "${applicationName}V${version}"
    }
}

task fatJar(type: Jar) {
    println 'type Jar'
    manifest {
        attributes 'Premain-Class': 'swing.common.ObjectSizeFetcher',
                'Can-Retransform-Classes': true,
                'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'cic.cs.unb.ca.ifm.App'
    }
    archiveBaseName.set("NetWorkTraffic-all")
    destinationDirectory.set(file('build/jar/'))
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

task execute(type: JavaExec) {
    println 'type JavaExec'
    mainClass.set("cic.cs.unb.ca.ifm.App")
    classpath = sourceSets.main.runtimeClasspath
    String osName = System.getProperty('os.name').toLowerCase()
    if (osName.contains('windows')) {
        jvmArgs '-Djava.library.path=jnetpcap/win/jnetpcap-1.4.r1425'
    } else {
        jvmArgs '-Djava.library.path=jnetpcap/linux/jnetpcap-1.4.r1425'
    }
}

task exeCMD(type: JavaExec) {
    mainClass.set("cic.cs.unb.ca.ifm.Cmd")
    classpath = sourceSets.main.runtimeClasspath
    String osName = System.getProperty('os.name').toLowerCase()
    if (osName.contains('windows')) {
        jvmArgs '-Djava.library.path=jnetpcap/win/jnetpcap-1.4.r1425'
    } else {
        jvmArgs '-Djava.library.path=jnetpcap/linux/jnetpcap-1.4.r1425'
    }
}

task cmdScript(type: CreateStartScripts) {
    mainClass.set("cic.cs.unb.ca.ifm.Cmd")
    applicationName = "cfm"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
    defaultJvmOpts = ["-Djava.library.path=../lib/native"]
}
task executePcapToCsvCli(type: JavaExec) {
    mainClass.set("cic.cs.unb.ca.jnetpcap.PcapToCsvCli")
    classpath = sourceSets.main.runtimeClasspath
    args = project.hasProperty('pcapFile') && project.hasProperty('outputDir') ?
            [project.pcapFile, project.outputDir] : []

    if (args.isEmpty()) {
        doFirst {
            println 'Error: Please provide pcapFile and outputDir as project properties.'
            println 'Usage: ./gradlew executePcapToCsvCli -PpcapFile=<path/to/pcap> -PoutputDir=<path/to/output>'
            throw new GradleException("Missing arguments")
        }
    }

    // Setting the correct library path based on the OS
    String osName = System.getProperty('os.name').toLowerCase()
    if (osName.contains('windows')) {
        jvmArgs '-Djava.library.path=jnetpcap/win/jnetpcap-1.4.r1425'
    } else {
        jvmArgs '-Djava.library.path=jnetpcap/linux/jnetpcap-1.4.r1425'
    }
}
applicationDistribution.into("bin") {
    from(cmdScript)
    fileMode = 0755
}

// The Application Plugin
application {
    mainClass.set("cic.cs.unb.ca.ifm.App")
    applicationName = "CICFlowMeter"
    applicationDefaultJvmArgs = ["-Djava.library.path=../lib/native"]
}

applicationDistribution.from("jnetpcap/linux/jnetpcap-1.4.r1425") {
    include "*.so"
    into('lib/native')
}
applicationDistribution.from("jnetpcap/win/jnetpcap-1.4.r1425") {
    include "*.dll"
    into('lib/native')
}
applicationDistribution.from('LICENSE.txt') {
    into('')
}
applicationDistribution.from('ReadMe.txt') {
    into('')
    rename("ReadMe.txt", "README.md")
}

// Publishing configuration using the maven-publish plugin
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

// Distributions block to handle duplicates in distTar
distributions {
    main {
        contents {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}